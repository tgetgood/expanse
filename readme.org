#+TITLE: Macro Expanse

Browser and evaluator of lemonade projects.

* Overview

* Setup

To get an interactive development environment run:

		lein figwheel

and open your browser at [localhost:3449](http://localhost:3449/).
This will auto compile and send all changes to the browser without the
need to reload. After the compilation process is complete, you will
get a Browser Connected REPL. An easy way to try it is:

		(js/alert "Am I connected?")

and you should see an alert in the browser window.

To clean all compiled files:

		lein clean

To create a production build run:

		lein do clean, cljsbuild once min

And open your browser in `resources/public/index.html`. You will not
get live reloading, nor a REPL.

* Dev Notes
** Embedding
	 The current line of thought only allows static images (or animations) to be
	 embedded within each other. What we really want is to be able to take one
	 data driven, interactive visual object and embed it within another.

	 The problem here arises when the child needs to communicate with the parent
	 in some way. How does the child send changes to the parent? Is it possibly in
	 a safe way? How does the parent pass instantiation information to the child?

	 Is this whole effort a departure from the relational thinking that was the
	 original grounding of the lemonade project? Passing from pure data to
	 functions makes me think that it is, but could there be some way to preserve
	 it?
** Thumbnails
	 It's trivial to scale down a drawing and embed it in another, but how can we
	 tell the embedding process how much to scale down?

	 Should the initial drawing depend on a window in such a way that the
	 embedding process can just pass the new window constraints?

	 Should the embedding processs render to an image and find the
	 orthocentre/bounding box?

	 Should a drawing just come with a bounding box annotation?

	 Well, let's not forget that we have full geometric info on images. We know
	 from the image data, how many pixels it will span. If the image is assumed to
	 be finite, scaling the entire thing to the screen size is trivial. That
	 should be the next line of inquiry.
** Masking
	 If a drawing is infinite, or just too big, how do we make sure it's
	 restricted appropriately? Lemonade currently has no concept of negative
	 space. Is that the right way to get a polite embedding?
* License

Copyright Â© 2017 Thomas Getgood

Distributed under the Eclipse Public License either version 1.0 or (at your option) any later version.
