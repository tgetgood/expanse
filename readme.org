#+TITLE: Macro Expanse

Browser (and eventually editor) for [[https://github.com/tgetgood/lemonade][lemonade]] example projects.

Try it at http://l.macroexpanse.com

* Overview
	Expanse is to be a collection of code examples demonstrating what is currently
	called lemonade.

	The plan is to compile the example code directly in the browser and embed an
	editor in the page. However, until that comes to pass you'll need to clone
	this repo and run figwheel locally, using your editor of choice to play with
	the code.
* Setup
** Check It Out
	 Go to the list at l.macroexpanse.com or localhost:3449/index.html and scroll
	 through the examples. Click on an example to open it fullscreen, click again
	 to go back to the index.

	 Honestly the online version doesn't do much impressive yet, you're better off
	 running it in figwheel so you can play with it properly.
** With Figwheel
	 Clone the repo and run

	 #+BEGIN_SRC sh
	 $ lein figwheel
	 #+END_SRC

	 Open your browser to http://localhost:3449/index.html to see the page.

	 The example code is in the =examples= dir at the top level. Each example is a
	 complete clojure project that will run on its own; expanse is just a browser
	 for them.

	 With the demo running change the drawing code in any of the examples it will
	 be reloaded almost instantly.

	 Tutorial to come.
** Try Your Own Examples
	 To create your own example project use the lein template

	 #+BEGIN_SRC sh
	 $ lein new lemonade NAME
	 #+END_SRC

	 Start figwheel in your new project folder and follow the instructions from
	 the previous step.
* Dev Notes
** Embedding
	 The current line of thought only allows static images (or animations) to be
	 embedded within each other. What we really want is to be able to take one
	 data driven, interactive visual object and embed it within another.

	 The problem here arises when the child needs to communicate with the parent
	 in some way. How does the child send changes to the parent? Is it possibly in
	 a safe way? How does the parent pass instantiation information to the child?

	 Is this whole effort a departure from the relational thinking that was the
	 original grounding of the lemonade project? Passing from pure data to
	 functions makes me think that it is, but could there be some way to preserve
	 it?
** Thumbnails
	 It's trivial to scale down a drawing and embed it in another, but how can we
	 tell the embedding process how much to scale down?

	 Should the initial drawing depend on a window in such a way that the
	 embedding process can just pass the new window constraints?

	 Should the embedding processs render to an image and find the
	 orthocentre/bounding box?

	 Should a drawing just come with a bounding box annotation?

	 Well, let's not forget that we have full geometric info on images. We know
	 from the image data, how many pixels it will span. If the image is assumed to
	 be finite, scaling the entire thing to the screen size is trivial. That
	 should be the next line of inquiry.
** Masking
	 If a drawing is infinite, or just too big, how do we make sure it's
	 restricted appropriately? Lemonade currently has no concept of negative
	 space. Is that the right way to get a polite embedding?
* License

	Copyright Â© 2018 Thomas Getgood

	Distributed under the Eclipse Public License either version 1.0 or (at your
	option) any later version.
